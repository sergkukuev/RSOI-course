Лабораторная работа #2
Микросервисная арихитектура

Формулировка:
	В рамках второй лабораторной работы требуется выбрать предметную область и реализовать несколько взаимодействующих друг с другом сервисов. Сервисы должны решать только свою бизнес-функцию, которая является частью общей системы.

	Система должна предоставлять REST API для выполнения операций. Получение данных нужно выполняться только через сервис, к которому относятся эти данные. Агрегацию результатов выполнять на отдельном сервисе.

Требования:
	1. Придумать предметную область и реализовать 3-4 сервиса, выполняющих некоторую свою бизнес-функцию в рамках предметной области.
	2. Помимо 3-4 сервисов выделить сервис агрегации (gateway), проксирующий запросы от других систем и агрегирующий данные. Все запросы пользователя проходят через эту систему.
	3. Данные каждого сервиса можно хранить как в SQL, так и в NoSQL базе. Для упрощения допускается хранить данные на одной базе, но в разных схемах. При этом каждый сервис должен взаимодействовать только со своей схемой, получение данных, не относящихся к текущему сервису строго запрещено.
	4. Должен быть хотя бы один запрос, требующий агрегированную информацию с нескольких сервисов (двух и более).
	5. Должно быть минимум два запроса, выполняющие обновление данных на нескольких сервисах в рамках одной операции.
	6. При получении списка данных предусмотреть пагинацию.
	7. Сделать подробное логгирование выполняемых операций на каждом сервисе.
	8. При реализации использовать шаблоны MVC, смешивание представления и бизнес-логики строго запрещено.
	9. Все публичные методы требуется покрыть unit-тестами (покрытие функций). Покрытие тестами должно быть не менее 70%, для демонстрации покрытия использовать какую-нибудь утилиту.
	10. Подготовить шаблоны запросов или маленький скрипт для демонстрации работы.

Пример:
	Для примера рассмотрим упрощенную версию интернет-магазина (jpg/lab2_1.jpg).
	Структура сервисов изображена на рисунке jpg/lab2_2.jpg.
	Корневая сущность заказ (Order). У каждого заказа есть пользовать (User) – тот, кто сделал этот заказ, причем у пользователя может быть несколько заказов. Каждый заказ содержит информацию о товарах (Goods) и об оплате (Billing).

Методы:
	i. GET /goods?page=X&size=Y - список всех товаров, при выдаче использовать пагинацию.
	ii. GET /goods/{id} - расширенная информация о товаре.
	iii. Требующие авторизацию
	iv. GET /user/{userId}/orders?page=X&size=Y - информация о заказах пользователя.
	v. GET /user/{userId}/order/{id} - расширенная информация о заказе - список товаров, информация об оплате.
	vi. POST /user/{userId}/order - создать заказ.
	vii. PATCH /user/{userId}/order/{id} - редактировать данные заказа.
	viii. POST /user/{userId}/order/{orderId}/good/{goodId} - добавить товар в заказ.
	ix. DELETE /user/{userId}/order/{orederId}/good/{goodId} - удалить товар из заказа.
	x. POST /user/{userId}/order/{id}/billing - выполнить биллинг (в теле передается какая-то информация для выполнения биллинга).